#!/usr/bin/perl
    use strict;
    use warnings;
	use Data::Dumper;

#use: 5_Subnetwork_extract.pl ../Results/Gen-Gen.nodot.list AT1G01090 3
# 0file: list of gen-gen relationships generated by 2_DataBase_network_no_duplicates.pl
# 1: gene name
# 2: depth

#_____________________#Load Gen-Gen relationships into a hash of hashes____________________

	print "Reading Gen-Gen network\n";
	my ($gengenref, $onlygenesref) = create_hashofhashes_first("< $ARGV[0]");
	my %genes_and_genes = %$gengenref; #gene network
	my %gene_list = %$onlygenesref; #genes in network
	#print_hash_of_hashes(\%genes_and_genes);

#_____________________#Read central node and depth_________________________________________


my $gene = $ARGV[1]; #central node of the network to extract
my $userdepth = $ARGV[2]; #depth of the subnetwork to extract

print "Extracting subnet\n";


my %genes_in_net;
$genes_in_net{$gene} = 0;	#genes in subnet
my %subnet ; #nested hash to store subnet

#%subnet = nested_hash(\%gene_list, \%genes_and_genes, $gene, $userdepth, \%genes_in_net);
#print Dumper(\%subnet);


$subnet{$gene} = nested_hash(\%gene_list, \%genes_and_genes, $gene, $gene, $userdepth, \%genes_in_net);
#print Dumper(\%subnet);

#print Dumper(\%genes_in_net);

#print_nested_hash(\%org_chart, 0);

#_____________________#print subnet gene pairs____________________________________________

print "printing subnet\n";

my @endtails;
my %relations;
my $etref = print_nested_hash(\%subnet, $gene, 0, \@endtails, \%relations);


#print Dumper(\@endtails);
#print Dumper(\%relations);


print "printing endtails\t$#endtails\n";

for my $i (0 .. $#endtails) {
	for my $j ($i+1 .. $#endtails) {
		if (exists $genes_and_genes{$endtails[$i]}{$endtails[$j]} || $genes_and_genes{$endtails[$j]}{$endtails[$i]}) {
			if (exists $relations{$endtails[$i]}) {
				$relations{$endtails[$i]}{$endtails[$j]} = 0;			
			} else {
				my %hash;
				$hash{$endtails[$j]} = 0;
				$relations{$endtails[$i]} = {%hash};
			
			}
			#print "$endtails[$i]\t$endtails[$j]\n";
		} 
		
	}
}

print "print to file\n";

print_hash_of_hashes(\%relations);




exit 0;



#############################################################################################
#																							#
#																							#
#																							#
#										SUBROUTINES											#
#																							#
#																							#
#																							#
#############################################################################################

#Recursive function to extract subnetwork \%gene_list, \%genes_and_genes, $gene, $gene, $userdepth, \%genes_in_net
sub nested_hash {
    my $genes_hash_ref = shift;
	my $genes_hoh_ref = shift; #hoh: hash oh hashes
	my $node = shift;
	my $prevnode =shift;
    my $depth = shift;
	my $genes_in_netref = shift;
	
	my %net;
	
	#print "$node\n";
	$depth--;
	
	foreach my $key (sort keys %{$genes_hash_ref}) {
		#print "$key\n";
		if ( exists $genes_hoh_ref->{$node}{$key} || $genes_hoh_ref->{$key}{$node}) {
			#$net{$key} = 0; #replace 0 for recursive
			if (exists $genes_in_netref->{$key}) {
				if ($key ne $node && $key ne $prevnode) {
					$net{$key} = "end";
					
				}
			} else {
				if ($depth > 0) {
					$net{$key} = nested_hash($genes_hash_ref, $genes_hoh_ref, $key, ,$prevnode, $depth, $genes_in_netref);				
					$genes_in_netref->{$key} = 0;
				} elsif ($depth == 0){
					$net{$key} = "endtail";
					$genes_in_netref->{$key} = 0;
					
				}
			}
		
		
			#print "$node\t$key\n";
		}
		
	
	}
	$prevnode = $node;
	return (\%net);
}


#________________________________________________________________________________________________________
#Recursive function to print nested hash
sub print_nested_hash {
    my $hash_ref = shift;
	my $prevnode = shift; 
    my $depth = shift;
	my $endsref =shift;
	my $relref = shift;
    foreach my $key (sort keys %{$hash_ref}) {
        #print '    ' x $depth, $key, "\n";
		if (exists $relref->{$prevnode}) {
			$relref->{$prevnode}{$key} = 0;			
		} else {
			my %hash;
			$hash{$key} = 0;
			$relref->{$prevnode} = {%hash};
			
		}
        #print "$prevnode\t$key\n";
        if (ref($hash_ref->{$key}) eq "HASH") {
			#print 
			my $npnode = $key;
            print_nested_hash($hash_ref->{$key}, $npnode, $depth+1, $endsref, $relref);
        } elsif ($hash_ref->{$key} eq "endtail") {
        	push (@$endsref, $key)
        }
    }
	
}

#________________________________________________________________________________________________________


#Creates a hash of hashes, Firts column MasterKeys:
sub create_hashofhashes_first {
	my ($FILE) = @_;	
	my %masterhash; #hash of hashes with MasterKeys
	my $count = 0;
	
	my %unique; #hash with list of genes in network
	
	#open my $BLASTEDGENES, "< $ARGV[0]";
	open DATA, $FILE;
	while ( my $line = <DATA> ) {
		chomp $line;
		my @columns = split (/\t/, $line);
		my %subhash;
		
		$unique{$columns[0]} = 0; #change later for ++
		$unique{$columns[1]} = 0; #change later for ++
		
		if ( exists $masterhash{$columns[0]} ) {
			$masterhash{$columns[0]}{$columns[1]} = 1;
			#%subhash = %{$masterhash{$columns[0]}};
		} else {
			%subhash = ();
			$subhash{$columns[1]} = 1;
			$masterhash{$columns[0]} = {%subhash}; # se hace una hash de hashes,
		}
		$count++;
		#print "$count\n";
		#$subhash{$_}++ for ($columns[1]);
		#$masterhash{$columns[0]} = {%subhash}; # se hace una hash de hashes,
	}
	close DATA;
	return (\%masterhash, \%unique);
}

#________________________________________________________________________________________________________

#Reads a file of gen-gen pairs and returns only unique gene names:
sub get_only_names {
	my ($FILE) = @_;	
	my @onlynames; #array with gene names
	
	#open my $BLASTEDGENES, "< $ARGV[0]";
	open DATA, $FILE;
	
	print "\nGetting Genes\n";
	while ( my $line = <DATA> ) {
		
			chomp $line;
			my @columns = split (/\t/, $line);
			push (@onlynames, @columns); 
			#print "$#onlynames\n";
		
	
	}
	close DATA;
	print "Removing duplicates\n";
	@onlynames = uniq(@onlynames);
	print "Total number of genes: $#onlynames\n";
	return @onlynames;
}

#remove duplicates
sub uniq {
    return keys %{{ map { $_ => 1 } @_ }};
}


#________________________________________________________________________________________________________

#Prints a hash oh hashes
#Prints a hash oh hashes

sub print_hash_of_hashes {
  my $master_reference = shift;
  my %masterhash = %$master_reference;
  
  open my $OUT, "> ../Results/GenX_subnet.list.csv";
  
	foreach my $masterkey (sort keys %masterhash) {
		#print $OUT "$masterkey\t"; #imprimir master key
		foreach my $key (keys %{$masterhash{$masterkey}}) {
			my @master = split /\./, $masterkey;
			my @subkey = split /\./, $key;
			
			print $OUT "$master[0]\t$subkey[0]\n"; 
			#print $OUT "$key\t"; #prints only subkey
		}
		#print $OUT "\n"; 
	}
	
  close $OUT;
	
  
}


=comsub print_hash_of_hashes {
  my $master_reference = shift;
  my %masterhash = %$master_reference;
  
	foreach my $masterkey (sort keys %masterhash) {
		print "$masterkey\t"; #imprimir EC number
		foreach my $key (keys %{$masterhash{$masterkey}}) {
			print "$key\t"; #imprimir metabolitos
		}
		print "\n"; 
	}
  
}
=cut
#________________________________________________________________________________________________________

#Prints an array of arrays

sub print_array_of_arrays {
  my $master_reference = shift;
  my @masterarray = @$master_reference;
  
	for my $i (0 .. $#masterarray) {
		for my $j (0 .. $#{$masterarray[$i]}) {
			print "$masterarray[$i][$j]\t"; #imprimir metabolitos
		}
		print "\n"; 
	}
  
}
